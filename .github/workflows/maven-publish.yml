# .github/workflows/maven-publish.yml

# Nome do workflow que aparecerá na aba "Actions" do GitHub.
name: Java CI with Maven

# Define os gatilhos que iniciarão o workflow.
# Neste caso, em cada push para a branch principal ou em cada pull request aberto para ela.
on:
  push:
    branches: [ "main", "master" ] # Adapte para o nome da sua branch principal
  pull_request:
    branches: [ "main", "master" ] # Adapte para o nome da sua branch principal

# Define os jobs que serão executados.
jobs:
  # O único job que temos, chamado "build".
  build:
    # O tipo de máquina virtual que o job rodará. "ubuntu-latest" é uma escolha comum e recomendada.
    runs-on: ubuntu-latest

    # A sequência de passos que o job "build" executará.
    steps:
    # 1. Checkout do código: Baixa o seu código do repositório para a máquina virtual.
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Configurar o JDK 17: Instala a versão correta do Java.
    # O seu pom.xml especifica <java.version>17</java.version>.
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin' # 'temurin' é uma distribuição popular e recomendada do OpenJDK.
        cache: maven # Habilita o cache de dependências do Maven para acelerar builds futuros.

    # 3. Build com o Maven: Compila o projeto, roda os testes e cria os pacotes.
    # O comando "install" é uma ótima escolha para CI em projetos multi-módulo
    # pois ele valida a compilação, os testes e a instalação dos módulos.
    - name: Build with Maven
      run: mvn -B clean install --file pom.xml
